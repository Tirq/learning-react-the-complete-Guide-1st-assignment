{"version":3,"sources":["UserInput/UserInput.js","UserOutput/UserOutput.js","Instructions/Instructions.js","App.js","serviceWorker.js","index.js"],"names":["userInput","props","type","style","color","border","onChange","changed","value","userOutput","username","className","instructions","App","state","usernames","name","nameChangedHandler","event","target","setState","dynamicName","this","fixedName","Instructions","UserInput","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TAiBeA,G,MAfG,SAACC,GAOf,OACI,2BAAOC,KAAK,OACLC,MAPO,CACdC,MAAO,OACPC,OAAQ,mBAMDC,SAAUL,EAAMM,QAChBC,MAAOP,EAAMO,UCEbC,G,MAZK,SAACR,GAAW,IACrBS,EAAY,CAACT,EAAMS,UADC,GAE3B,OACI,yBAAKC,UAAU,cACX,6BACA,gDACA,2BAAID,GACJ,gCCaGE,EArBM,WACjB,OACI,6BACI,mHACA,gKACA,4BACA,mFACA,iGACA,+HACA,6GACA,kIACA,iGACA,wIACA,8HACA,sHACA,sJCuBGC,E,2MA/BbC,MAAS,CACPC,UAAW,CACT,CAACC,KAAM,gBACP,CAACA,KAAM,gB,EAIXC,mBAAqB,SAACC,GACpB,IAAMH,EAAS,YAAQ,EAAKD,MAAMC,WAClCA,EAAU,GAAGC,KAAOE,EAAMC,OAAOX,MACjC,EAAKY,SAAS,CAACL,e,wEAIf,IAAMM,EAAcC,KAAKR,MAAMC,UAAU,GAAGC,KACtCO,EAAYD,KAAKR,MAAMC,UAAU,GAAGC,KAC1C,OACE,yBAAKL,UAAU,OACb,kBAACa,EAAD,MACA,yCACA,kBAACC,EAAD,CACElB,QAASe,KAAKL,mBACdT,MAAOa,IACT,oDACA,kBAAC,EAAD,CAAYX,SAAUW,IACtB,kBAAC,EAAD,CAAYX,SAAUa,S,GA3BZG,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1d6aaba9.chunk.js","sourcesContent":["import React from 'react';\n\nconst userInput = (props) => {\n    \n    const inlineCss = {\n        color: 'blue',\n        border: '2px solid black'\n      };\n\n    return (\n        <input type=\"text\"\n               style={inlineCss}\n               onChange={props.changed} \n               value={props.value}/>\n    )\n};\n\nexport default userInput;","import React from 'react';\nimport './UserOutput.css';\n\nconst userOutput  = (props) => {\n    const [username] = [props.username];\n    return(\n        <div className=\"UserOutput\">\n            <hr/>\n            <p>The username is: </p>\n            <p>{username}</p>\n            <hr/>\n        </div>\n    )\n};\n\nexport default userOutput;","import React from 'react';\n\nconst instructions = () => {\n    return (\n        <div>\n            <h2>First assignment based on React course - Understanding the Base Features and Syntax</h2>\n            <h3> React - The Complete Guide (incl Hooks, React Router, Redux) https://www.udemy.com/course/react-the-complete-guide-incl-redux/ </h3>   \n            <ol>\n            <li>Create TWO new components: UserInput and UserOutput</li>\n            <li>UserInput should hold an input element, UserOutput two paragraphs</li>\n            <li>Output multiple UserOutput components in the App component (any paragraph texts of your choice)</li>\n            <li>Pass a username (of your choice) to UserOutput via props and display it there</li>\n            <li>Add state to the App component (=> the username) and pass the username to the UserOutput component</li>\n            <li>Add a method to manipulate the state (=> an event-handler method)</li>\n            <li>Pass the event-handler method reference to the UserInput component and bind it to the input-change event</li>\n            <li>Ensure that the new input entered by the user overwrites the old username passed to UserOutput</li>\n            <li>Add two-way-binding to your input (in UserInput) to also display the starting username</li>\n            <li>Add styling of your choice to your components/ elements in the components - both with inline styles and stylesheets</li>\n            </ol>\n        </div>\n    );\n};\n\nexport default instructions;","import React from 'react';\nimport {Component} from 'react';\nimport './App.css';\nimport UserInput from './UserInput/UserInput';\nimport UserOutput from './UserOutput/UserOutput';\nimport Instructions from './Instructions/Instructions';\n\nclass App extends Component {\n\n  state =  {\n    usernames: [\n      {name: 'Dynamic Name'},\n      {name: 'Fixed Name'}\n    ]\n  }\n\n  nameChangedHandler = (event) => {\n    const usernames  = [...this.state.usernames];\n    usernames[0].name = event.target.value;\n    this.setState({usernames});\n  }\n  \n  render(){\n    const dynamicName = this.state.usernames[0].name;\n    const fixedName = this.state.usernames[1].name;\n    return (\n      <div className=\"App\">\n        <Instructions/>\n        <p>One Input:</p> \n        <UserInput\n          changed={this.nameChangedHandler}\n          value={dynamicName}/>\n        <p>More than one Output:</p>\n        <UserOutput username={dynamicName}/>\n        <UserOutput username={fixedName}/>      \n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}